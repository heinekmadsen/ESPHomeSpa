external_components:
  - source: 
      type: local
      path: ./components

esphome:
  name: spa

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

uart:
  id: spa_uart_bus
  tx_pin: GPIO17
  rx_pin: GPIO16
  data_bits: 8
  parity: NONE
  stop_bits: 1
  baud_rate: 115200
  rx_buffer_size: 128
#  debug:
#    direction: RX
#    dummy_receiver: true
spa_reader:
  uart_id: spa_uart_bus
  temp_sensor:
    name: "temp"
  circ_binary_sensor:
    name: "Circ"
# sensor:
# - platform: custom
#   lambda: |-
#     auto spareader = new SpaReader(id(spa_uart_bus));
#     App.register_component(spareader);
#     return {spareader->temp_sensor,spareader->target_temp_sensor,spareader->jet1_sensor,spareader->jet2_sensor,spareader->blower_sensor,spareader->light_sensor,spareader->restmode_sensor,spareader->highrange_sensor,spareader->hour_sensor,spareader->minute_sensor,spareader->heater_sensor,spareader->circ_sensor};

#   sensors:
#   - name: "Current Temp"
#     unit_of_measurement: °C
#     accuracy_decimals: 1
#   - name: "Target Temp"
#     unit_of_measurement: °C
#     accuracy_decimals: 1
#   - name: "Jet1"
#   - name: "Jet2"
#   - name: "Blower"
#   - name: "Light"
#   - name: "Rest Mode"
#   - name: "High Range"
#   - name: "Hour"
#   - name: "Minute"
#   - name: "Heater"
#   - name: "Circulation Pump"
# # Enable Home Assistant API
api:

ota:
  platform: esphome
  password: 123

wifi:
  ssid: a123
  password: a123123123123

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Spa Fallback Hotspot"
    password: a123123123123

captive_portal:
    
